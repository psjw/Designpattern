한 클래스의 인터페이스를 클라이언트에서 사용하고자 하는 다른 인터페이스로 변환한다.
어댑터를 이용하면 인터페이스 호환성 문제 때문에 같이 쓸 수 없는 클래스들을 연결해서 쓸 수 있다.

'이미 제공되어 있는 것'과 '필요한 것'사이의 '차이'를 없애주는 디자인 패턴이 Adapter 패턴이다.

Adapter패턴은 Wrapper 패턴으로 불리기도 한다.
일반 상품을 예쁜 포장지로 싸서 선물용 상품으로 만드는 것처럼,
무엇인가를 한번 포장해서 다른 용도로 사용할 수 있게 교환해 주는 것이 wrapper 이며 adpater 이다.

Adapter 패턴에서는 다음과 같이 두가지 종류가 있다.
- 클래스에 의한 Adapter 패턴(상속을 사용한 Adapter 패턴)
- 인스턴스에 의한 Adapter 패턴(위임을 사용한 Adapter 패턴)


어떤 경우에 사용하는 것일까?
메소드가 필요하면 그것을 프로그래밍하면 되지 '왜 Adapter 패턴이 필요한 것일까?'

우리는 언제나 처음부터 프로그래밍을 한다고 할 수는 없다.
이미 존재하고 있는 클래스를 이용하는 경우도 자주 있다.
특히 그 클래스가 충분한 테스트를 받아서 버그가 적으면 실제로 지금까지 사용된 실적이 있다면 어떻게든 그 클래스를 부품으로 재이용하고 싶을 것이다.

Adapter 패턴은 기존의 클래스를 개조해서 필요한 클래스를 만든다.
- 이 패턴으로 필요한 메소드를 발빠르게 만들 수 있다.
- 만약 버그가 발생해도 기존의 클래스에는 버그가 없으므로 Adapter역할의 클래스를 중심적으로 조사하면되고, 프로그램 검사도 상당히 쉬워진다.

비록 소스가 없다라도...

이미 만들어진 클래스를 새로운 인터페이스에 맞게 개조시킬 때는 당연히 Adapter패턴을 사용해야 한다.
그러나 실제 우리가 새로운 인터페이스에 맞게 개조시킬 떄는 기존 클래스의 소스를 바꾸어서 '수정'하려고 생각한다.
이것을 조금 바꾸면 작업은 끝이다.' 라고 생각하기 쉽다.
그러나 그렇게 하면 동작테스트가 이미 끝난 기존의 클래스를 수정한 후에 다시 한번 테스트해야 한다.

Adapter패턴은 기존의 클래스를 전혀 수정하지 않고 목적한 인터페이시에 맞추려는 것이다.
또한 Adpater패턴에서는 기존 클래스의 소스 프로그램이 반드시 필요한 것은 아니다.
기존 클래스의 사양(Interface)만 알면 새로운 클래스를 만들 수 있다.

어댑터패턴 - 관련 패턴
Bridge 패턴
- Adapter 패턴은 인터페이스가 서로 다른 클래스들을 연결하는 패턴이다.
- Bridge 패턴은 기능의 계층과 구현의 계층을 연결시키는 패턴이다.

Decorator 패턴
- Adapter 패턴은 인터페이스의 차이를 조정하기 위한 패턴이다.
- Decorator 패턴은 인터페이스를 수정하지 않고 기능을 추가하는 패턴이다.

