한 객체의 상태가 바뀌면 그객체에 의존하는 다른객체들한테 연락이 가고 자동으로 내용이 갱신되는 일대다(one-to-many)의존성을 정의한다.

java.util.Observer 인터페이스와 java.util.Observable 클래스를 사용할수 있음
- 자바 내장 옵저버 패턴은 푸시방식, 풀 방식 모두 사용가능.

java.util.Observer 인터페이스를 구현하고 java.util.Observable 객체의 addObserver()메소드를 호출하면 옵저버 목록에 추가되고 deleteObserver()를 호출하면 옵저버 목록에서 제거가 된다.
- 자바 내장 옵저버 패턴은 푸시 방식, 풀 방식 모두 사용가능.

java.util.Observer 인터페이스를 구현하고 java.util.Observable 객체의 addObserver()메소드를 호출하면 옵저버 목록에 추가되고 deleteObserver()를 호출하면 옵저버 목록에서 제거가 된다.

연락을 돌리는 방법은 java.util.Observable를 상속받는 주제 클래스에서 setChanged() 소드를 호출해서 객체의 상태가 바뀌었다는 것을 알린후 notifyObservers()도는 notifyObserver(Object arg)
메소드를 호출하면 된다. (인자값을 넣어주는 메소드는 푸시방식으로 쓰임.)

옵저버 객체가 연락을 받는 방법은 update(Observable o, Object arg)메소드를 구현하기만 하면된다.
Observable o에는 연락을 보내는 주제 객체가 인자로 전달이 되고 Object arg에는 notifyObservers(Object arg)메소드에서 인자로 전달된 데이터 객체가 넘어온다.

